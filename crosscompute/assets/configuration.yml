---
# Examples: https://github.com/crosscompute/crosscompute-examples
# Forum: https://forum.crosscompute.com
# Gallery: https://crosscompute.net
# Documentation: https://docs.crosscompute.com

# protocol version determines how this file is interpreted (required)
crosscompute: 0.0.0

# name summarizes what your tool does
name: Tool X
# slug customizes the tool uri
slug: tool-x
# title sets the page title
title: Tool X - Improve health, safety, quality of life
# description explains why your tool is useful
description: Improve health, safety, quality of life in our communities
# version should increment after you make changes to your tool
version: 0.0.0

# copyright declares who owns the rights to this work
copyright:
  text: >-
    [<img src="{image_uri}" alt="{name}" loading="lazy">](
    {owner_uri}) Â© {year}. Made with the [CrossCompute Analytics
    Software Development Kit](https://docs.crosscompute.com).
  name: CrossCompute
  image_uri: /assets/logo.svg
  owner_uri: https://crosscompute.com
  year: 2024

# imports let you embed other tools in this tool
imports:
  # id references this import in your templates when embedding;
  # path specifies the location of the configuration to import (required)
  - id: abc
    path: abc/automate.yml

# input is how your scripts get data from the user
input:

  # input variables are provided to your scripts from the user or from presets
  variables:
    # id references this variable in your templates (required);
    # view specifies how to render your variable (required);
    # path specifies the file where your scripts load this variable (required);
    #   note that path is relative to the input folder;
    #   specify ENVIRONMENT to prevent saving the variable to disk;
    # configuration customizes the look and feel of the view
    - id: town_name
      view: string
      path: variables.dictionary
      label: What is the name of your town?
      configuration:
        suggestions:
          - value: Springfield
          - value: Branson
          - value: Nixa
          - value: Mansfield
          - value: Independence
    - id: age
      view: number
      path: variables.dictionary
      label: What is your age?
    - id: secret_code
      view: password
      path: ENVIRONMENT
      label: What is your secret code?
    - id: support_email
      view: email
      path: ENVIRONMENT
    - id: problem_description
      view: text
      path: problem.txt
    - id: blurb
      view: markdown
      path: blurb.md
    - id: flavor
      view: radio
      path: variables.dictionary
      configuration:
        options:
          - name: Vanilla
            value: vanilla
          - name: Chocolate
            value: chocolate
          - name: Strawberry
            value: strawberry
    - id: topics
      view: checkbox
      path: variables.dictionary
      configuration:
        options:
          - value: cooking
          - value: reading
          - value: writing
          - value: mathematics
          - value: swimming
    - id: profile_photo
      view: file
      path: photo{index}{suffix}
      configuration:
        mime-types:
          - image/png
          - image/jpeg
    - id: region
      view: map-mapbox-location
      path: variables.dictionary

  # input templates guide the user on how to specify the input variables
  templates:
    # path specifies the markdown file for your template (required)
    - path: input.md
    # expression determines whether your template shows next
    - path: input2.md
      expression: age >= 18

# output is how your scripts set data for the user
output:

  # output variables are provided by your scripts
  variables:
    # id references this variable in your templates (required);
    # view specifies how to render your variable (required);
    # path specifies the file where your scripts save this variable (required);
    #   note that path is relative to the output folder;
    # configuration customizes the look and feel of the view
    - id: document
      view: link
      path: document.pdf
      configuration:
        link-text: YOUR-LINK-TEXT
        file-name: YOUR-FILE-NAME
    - id: message
      view: string
      path: variables.dictionary
    - id: count
      view: number
      path: variables.dictionary
    - id: lyrics
      view: text
      path: lyrics.txt
    - id: monologue
      view: markdown
      path: monologue.md
    - id: logo
      view: image
      path: logo.svg
    - id: counts
      view: table
      path: counts.json
    - id: demo
      view: frame
      path: variables.dictionary
    - id: cards
      view: json
      path: cards.json
    - id: report
      view: pdf
      path: example.pdf
    - id: region
      view: map-mapbox
      path: region.geojson
      configuration:
        style: mapbox://styles/mapbox/dark-v10
        layers:
          - type: fill
            paint:
              fill-color: blue
          - type: circle
            paint:
              circle-color: red
    - id: incidents
      view: map-deck-screengrid
      path: incidents.json
      configuration:
        style: mapbox://styles/mapbox/dark-v10
    - id: identity
      view: barcode
      path: variables.dictionary

  # output templates guide the user on how to interpret the output variables
  templates:
    # path specifies the markdown file for your template (required)
    - path: output.md

# log is how your scripts communicate with the user while they are running
log:
  variables:
  templates:

# debug is how your scripts record information for troubleshooting bugs
debug:
  variables:
  templates:

# print defines how your output will render as a document or presentation
print:
  # print variables are generated by crosscompute printers
  variables:
    # id references this file in your templates (required);
    # view specifies how to render your file (required);
    # path specifies where the printer should save the file (required);
    # configuration customizes how the printer generates the file
    - id: report
      view: pdf
      path: report.pdf
      configuration:
        header-footer:
          font-family: sans-serif
          font-size: 8pt
          color: '#808080'
          padding: 0.1in 0.25in
          skip-first: true
        page-number:
          location: footer
          alignment: right
        name: '{y2 | slug}-{y3}.pdf'
    - id: report-uri
      view: link
      path: report.pdf
      label: Report URI
      configuration:
        path: report-uri.json

# presets are pre-defined runs with specific values set for each input variable
presets:

  # case 0:
  # folder sets values for input variables;
  # folder contains an input subfolder;
  # input subfolder contains files for the input variables
  - folder: presets/standard

  # case 1:
  # csv sets values for input variables, where each row is a separate preset;
  # folder is the name of the folder saved to disk;
  # name is the preset name displayed online;
  # slug is the preset uri;
  # the above string templates can include variable ids and filters
  - folder: presets/{x1 | slug}-{x2}
    name: '{x1 | title} {x2}'
    slug: '{x1 | slug}-{x2}'
    configuration:
      path: datasets/presets.csv

  # case 2:
  # reference folder sets default values for variables missing in the csv;
  # csv sets values for input variables, where each row is a separate preset
  - folder: presets/{x1 | slug}-{x2}
    name: '{x1 | title} {x2}'
    slug: '{x1 | slug}-{x2}'
    reference:
      folder: presets/standard
    configuration:
      path: datasets/presets.csv

# datasets are files that are expected by your scripts
datasets:
  # path specifies the location that your scripts should use to load the file;
  # reference path specifies the location of your actual file;
  # use reference paths to avoid changing the code in your scripts;
  # for example, suppose you have a report that relies on a monthly dataset;
  # use path to fix a location where your scripts can expect to find the file;
  # use reference path to point to the latest version of your monthly dataset
  - path: datasets/abc.csv
    reference:
      path: datasets/abc-2024.csv
  - path: datasets/def.csv
    reference:
      uri: https://example.net/def-2024.csv

# scripts contain code that turn input variables into output variables
scripts:
  # case 0:
  # command runs in the tool folder;
  # folder paths are passed as arguments
  - command: >
      python run.py
      {input_folder} {output_folder} {log_folder} {debug_folder}
  # case 1:
  # path is a python script that runs in the tool folder;
  # folder paths are passed as environment variables
  - path: run.py
  # case 2:
  # path is a python script that runs in the specified folder;
  # folder paths are passed as environment variables
  - path: run.py
    folder: scripts
  # case 3:
  # path is a jupyter notebook that runs in the tool folder;
  # folder paths are passed as environment variables
  - path: run.ipynb
  # case 4:
  # function is a python function that runs in the tool folder;
  # folder paths are passed as function arguments
  - function: run.plot_all

# environment configures how your scripts run
environment:

  # engine runs your scripts and can be either podman or unsafe;
  # podman is a container engine (see https://podman.io);
  # unsafe means that the scripts will run directly on your machine
  engine: podman

  # image is the container used to run your scripts when using podman engine
  image: python

  # packages are dependencies required by your scripts
  # engine=unsafe will install the packages directly on your machine
  # engine=podman will install the packages in the container image
  packages:
    # id is the name of the package as defined in the package manager
    # manager is the name of a package manager such as pip, npm, dnf, apt
    - id: matplotlib
      manager: pip
    - id: turf
      manager: npm
    - id: gdal
      manager: dnf
    - id: libgeos-dev
      manager: apt

  # ports expose server processes running in your scripts
  ports:
    # id should correspond to a log or debug variable id that uses frame view;
    # number is the port on which your script server process is listening
    - id: demo
      number: 8888

  # variables are environment variables needed by your scripts
  variables:
    # id is the environment variable to make available to your script
    - id: GOOGLE_KEY

  # concurrency defines how your presets run;
  # thread runs each preset as a separate thread;
  # process runs each preset as a separate process;
  # none runs each preset one at a time
  concurrency: process

  # interval specifies how long to wait before running your scripts again;
  # use this setting to have dashboards update themselves;
  # add an exclamation point to ensure the scripts run even if nobody watches
  interval: 30 minutes

# display configures the overall look and feel of your tool
display:

  # styles customize how your templates look
  styles:
    # path specifies the location of a css file
    - path: style.css
    # uri specifies the uri of a css file
    - uri: https://cdn.jsdelivr.net/npm/pygments-css@1.0.0/default.css

  # templates override the core templates used to render the site
  templates:
    # id specifies the name of the template to override;
    # path specifies the location of a jinja template
    - id: base
      path: base.html
    - id: live
      path: live.html
    - id: root
      path: root.html

  # pages override the design of specific pages
  pages:
    # id specifies the name of the page to override;
    # configuration sets the design of the page
    - id: tool
      configuration:
        # design input puts the input template on the tool page
        design: input
    - id: tool
      configuration:
        # design output puts the output template on the tool page
        design: output
    - id: tool
      configuration:
        # design none only renders the list of presets on the tool page
        design: none
    - id: input
      configuration:
        # design none removes all variable labels and css
        design: none
        # buttons override the design of specific buttons
        buttons:
          - id: continue
            text: Continuar
          - id: back
            text: Volver
    - id: output
      configuration:
        # design none removes all variable labels and css
        design: none

# authorization restricts access to your tool
authorization:
  # tokens are api keys for your tool;
  # each token defines an identity
  tokens:
    # path specifies the location of a yaml file;
    # the file should have tokens as keys and configuration settings as values;
    # abcd:
    #   role_name: admin
    #   town_name: Springfield
    # bcde:
    #   role_name: leader
    #   town_name: Branson
    # cdef:
    #   role_name: member
    #   town_name: Mansfield
    - path: tokens.yml
  # groups define permissions
  groups:
    # configuration settings define how a group matches an identity
    # permission ids specify which privileges the identity can access
    - configuration:
        role_name: admin
      permissions:
        - id: add_token
        - id: see_root
        - id: see_tool
        - id: see_preset
        - id: run_tool
    # note that the value for each configuration setting can also be a list;
    # then an identity will match this group if its setting matches a value
    - configuration:
        role_name:
          - leader
          - member
      permissions:
        - id: see_root
        - id: see_tool
        - id: see_preset
          # action match is specific to the permission see_preset;
          # in the example above, suppose that a user uses the token cdef;
          # then the user will have town_name Mansfield and
          # can only see presets whose input variable town_name is Mansfield
          action: match
