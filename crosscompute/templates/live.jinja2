{% extends BASE_JINJA2 %}

{% block body_js %}
setInterval(async function() {
  const response = await fetch('{{ BASE_URI }}', {method: 'HEAD'});
  console.log(response.headers);
  }, {{ PING_INTERVAL_IN_MILLISECONDS }});

/*
let streamSource, reconnectionId, serverTime = {{ timestamp_value }};
function connect() {
  streamSource = new EventSource('{{ BASE_URI }}{{ STREAMS_ROUTE }}');
  streamSource.onopen = function() {
    clearTimeout(reconnectionId);
  }
  streamSource.onmessage = async function(message) {
    const messageData = message.data;
    if (messageData != serverTime) {
      const response = await fetch(location.href, { method: 'head' });
      if (response.ok) {
        location.reload();
      } else {
        location.href = '/';
      }
    }
  }
  streamSource.onerror = function() {
    streamSource.close();
    clearTimeout(reconnectionId);
    reconnectionId = setTimeout(connect, 1000);
  }
}
connect();
*/
{{ super() }}
{%- endblock %}
